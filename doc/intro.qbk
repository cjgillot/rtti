[/
          Copyright Camille Gillot 2012 - 2014.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt)
]

[section:intro Introduction]

Multiple dispatch is a technique used in object-oriented programming,
in which a function can be dynamically dispatched on the type of
several of its arguments.

C++ already provides intrusive single dispatch using virtual functions :
any dynamic behavior shall be explicitly allowed with a virtual function declaration
or using the visitor design pattern.

It the rest of this document, we will denote by __multimethod__
functions using a multiple dispatch scheme.

[heading How it works]

In order to create a correct dispatch scheme, a library needs
a runtime access to the involved class hierarchy. This is done
via __rtti__ sub-library.

Once the guilty classes are defined, __multimethods__ can be declared at namespace scope,
using a specially defined macro. Then this multimethod
can be given several implementations, suited to corresponding argument
pairs. These implementations can span multiple translation unit.

At load time, all the implementations register themselves automatically.
The dispatch table computation is made at the first call to the __multimethod__.

[heading Caracteristics]

At first call, the runtime stores several helper tables
used for later function retrieval :

* the /invoker table/, storing code pointers
* the /poles tables/, storing condensed hierarchy

At call time, for each argument, the library looks
for the closest type in the /poles table/ and uses this
type for /invoker table/ lookup.
The generation of the /invoker table/ uses the algorithm described in
[footnote Peter Pirkelbauer, Yuriy Solodkyy, and Bjarne Stroustrup. 2007. Open multi-methods for c++. In Proceedings of the 6th international conference on Generative programming and component engineering (GPCE '07). ACM, New York, NY, USA, 123-134. DOI=10.1145/1289971.1289993].
This algorithm provides an efficient method to store the code pointers.
/Poles table/ is named and computed from
[footnote Eric Dujardin, Eric Amiel, and Eric Simon. 1998. Fast algorithms for compressed multimethod dispatch table generation. ACM Trans. Program. Lang. Syst. 20, 1 (January 1998), 116-165. DOI=10.1145/271510.271521].
This model reduce the number of classes involved in the /invoker table/ generation.
The table is then stored in a hash table, used to retrieve and memorize class associations.

These technique enables very fast dispatch, though keeping
stored tabled small. Moreover, this technique handles well introduction
of new derived classes, without need of any recomputation of the tables.

[heading Openness]

The ability to define __multimethods__ for closed classes gives an interesting alternative to usual visitor design pattern.
First, __multimethods__ can completely replace visitors as a closed extension method,
but those can also be used to create new out-of-class functions with late binding.

[heading Limitations]

Due to the computation model (dynamically register overloads),
the __multimethods__ are not safe before entering [^main()].

[endsect]
