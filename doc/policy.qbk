[/
          Copyright Camille Gillot 2012 - 2015.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt)
]

[section:policy Ambiguity resolution]

Unlike usual virtual methods, __multimethods__ are subject to dispatch ambiguity.
At first call, the dispatch table is generated,
and it will be used to choose the correct behaviour at each subsequent call.

When an ambiguity exists, it is flagged first at this table generation stage.
At this point, an /ambiguity handler/ is called to resolve it.
If the problem cannot be resolved,
a special placeholder is inserted in the dispatch table.
The placeholder is a pointer to a /bad dispatch/ function.

Thanks to this placeholder, at dispatch resolution,
the algorithm need not care about ambiguities.
Then, if an ambiguous call is made,
the /bad dispatch/ function is called.

By default, the /ambiguity handler/ does nothing,
and the /bad dispatch/ action throws `rtti::bad_dispatch`.
This behaviour can be customized using /policy/ classes,
passed to the __multimethod__ declaration.

[import ../test/policy/classes.hpp]

In this section, we will use the following set of classes:
[po_classes]

[section Customized ambiguity resolution using /policy/ class]

[import ../test/policy/wildcard.cpp]
[po_wildcard]

[endsect]

[section Reusing policy class]

[import ../test/policy/noreturn.cpp]
[po_policy]

[endsect]

[section Symmetric function using a policy class]

[import ../test/policy/symmetric.cpp]
[po_symm]

[endsect]

[endsect]
