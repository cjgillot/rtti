[/
          Copyright Camille Gillot 2012 - 2016.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt)
]

[section:smart_ptr Using smart pointers]

Modern C++ code tends to hide as much as possible
naked pointers behind the safer and more reliable
smart pointers.
In order to be able to call a __multimethod__ directly with smart pointers,
we provide extensible support for pointer-like objects,
without need to unwrap and reconstruct the smart pointers.

[section Using __shared_ptr__]

[import ../test/smart_ptr/boost_shared_ptr.cpp]
[bsp_boost_shared_ptr]

[endsect]

[section Supported pointer types]

By default, only raw pointers and references (both lvalue and rvalue)
can appear inside the virtual tag `_v<>` without further customization.
Since adding a new pointer type to the library can be cumbersome
(see [link mmethod_doc.smart_ptr.add next paragraph] for an example),
the library provides implementations for some current smart pointers.
The supported classes are:

[table Supported smart pointers
    [[ Smart pointer class ][ Included file ]]
    [[ `boost::shared_ptr` ][ [@../include/mmethod/smart_ptr/boost_shared_ptr.hpp =mmethod/smart_ptr/boost_shared_ptr.hpp=] ]]
    [[ `boost::unique_ptr` (partial)   ][ [@../include/mmethod/smart_ptr/boost_unique_ptr.hpp   =mmethod/smart_ptr/boost_unique_ptr.hpp= ] ]]
    [[ `boost::intrusive_ptr` ][ [@../include/mmethod/smart_ptr/boost_intrusive_ptr.hpp =mmethod/smart_ptr/boost_intrusive_ptr.hpp=] ]]
    [[ `std::shared_ptr`   ][ [@../include/mmethod/smart_ptr/stl_shared_ptr.hpp   =mmethod/smart_ptr/stl_shared_ptr.hpp= ] ]]
    [[ `std::unique_ptr` (partial)   ][ [@../include/mmethod/smart_ptr/stl_unique_ptr.hpp   =mmethod/smart_ptr/stl_unique_ptr.hpp= ] ]]
]

The `unique_ptr` is only partially supported because of the deleters.
There is no way to convert a deleter for type /T/ into a deleter
for a subtype /U/ in general, although the converse is possible.

[endsect]

[section:add Adding a new pointer type]

[import ../test/smart_ptr/smart_ptr.cpp]
[sm_smart_ptr]

[endsect]

[endsect]
